// Task1
use hw6
mongoimport -d hw6 -c students C:\Users\betty\OneDrive\Desktop\graduate\course\SQL\hw6\code\studentE.csv --type csv --headerline

// Task2
db.students.aggregate([
  {
    $match: { position: "學生" }
  },
  {
    $group: {
      _id: "$dept",
      count: { $sum: 1 }
    }
  },
  {
    $sort: { count: -1 }
  },
  {
    $limit: 10
  }
]);

// Task3
mongoimport -d hw6 -c students C:\Users\betty\OneDrive\Desktop\graduate\course\SQL\hw6\code\new_studentE.csv --type csv --headerline

db.students.updateMany(
  {},
  {
    $set: { updated: ISODate("2024-05-23T00:00:00Z") }
  }
);

db.students.find(
  { dept: "電機所" }, 
  { _id: 0, position: 1, dept: 1, updated: 1 }
);

// Task4
// Update new_student
db.students.updateMany(
  { _id: { $in: ["b19303008", "b19303129", "r09303019"] } },
  { $set: { updated: ISODate("2024-06-01T00:00:00Z") } }
);

// Update myself
db.students.updateOne(
  { name: "鄧雅文 (TENG, YA-WEN)" }, 
  { $set: { updated: ISODate("2024-06-01T00:00:00Z") } }
);

db.students.find(
  { updated: ISODate("2024-06-01T00:00:00Z") },
  { _id: 0, position: 1, dept: 1, updated: 1, name: 1, email: 1 }
);

// Task5-1
db.students.aggregate([
  {
    $match: {
      updated: {
        $gte: ISODate("2024-01-01T00:00:00Z"),
        $lte: ISODate("2024-05-31T23:59:59Z")
      }
    }
  },
  {
    $group: {
      _id: "$dept",
      count: { $sum: 1 }
    }
  },
  {
    $merge: {
      into: "tally",
      whenMatched: "merge",
      whenNotMatched: "insert"
    }
  }
]);

db.tally.find().forEach(printjson);


// Task5-2
db.students.aggregate([
  {
    $match: {
      updated: {
        $gte: ISODate("2024-06-01T00:00:00Z"),
        $lte: ISODate("2024-06-30T23:59:59Z")
      }
    }
  },
  {
    $group: {
      _id: "$dept",
      count: { $sum: 1 }
    }
  },
  {
    $merge: {
      into: "tally",
      whenMatched: "merge",
      whenNotMatched: "insert"
    }
  }
]);

db.tally.find().forEach(printjson);

// Task6
mongoimport -d hw6 -c student_groups C:\Users\betty\OneDrive\Desktop\graduate\course\SQL\hw6\code\student_groupE.csv --type csv --headerline

db.students.aggregate([
  {
    $lookup: {
      from: "student_groups",
      localField: "_id",
      foreignField: "_id",
      as: "group_info"
    }
  },
  {
    $unwind: "$group_info"
  },
  {
    $addFields: {
      group: "$group_info.group"
    }
  },
  {
    $project: {
      group_info: 0
    }
  },
  {
    $merge: {
      into: "students",
      whenMatched: "merge",
      whenNotMatched: "fail"
    }
  }
]);


// Task7
db.students.aggregate([
  {
    $match: {
      group: { $exists: true, $ne: null }
    }
  },
  {
    $group: {
      _id: "$group",
      members: { $push: "$name" }
    }
  },
  {
    $project: {
      _id: 0,
      group: "$_id",
      members: 1
    }
  }
]);